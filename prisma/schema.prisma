generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Form {
  id          String         @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime       @default(now())
  createdById String
  createdBy   User           @relation(fields: [createdById], references: [id])
  questions   FormQuestion[]
  responses   FormResponse[]
}

model FormQuestion {
  id        String         @id @default(cuid())
  label     String
  type      QuestionType
  required  Boolean        @default(false)
  options   String[]
  form      Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  responses FormResponse[]

  @@unique([formId, id])
}

model FormResponse {
  id          String       @id @default(cuid())
  form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String
  question    FormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String[]
  createdAt   DateTime     @default(now())
  createdById String
  createdBy   User         @relation(fields: [createdById], references: [id])
}

// NEXTAUTH

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole       @default(USER)
  isTwoFactorEnabled Boolean        @default(false)
  verified           Boolean        @default(false)
  accounts           Account[]
  Form               Form[]
  FormResponse       FormResponse[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  USER
}

enum QuestionType {
  TEXT
  TEXTAREA
  MULTIPLE_CHOICE
  DROPDOWN
  CHECKBOX
  FILE
}
